PROBLEM STATEMENTS:

Problem Statement 1: Basic UVM Testbench for a Simple DUT
Objective: Create a basic UVM testbench to simulate a simple DUT (like a 2-input AND gate).

Tasks:

Create a SystemVerilog module for a 2-input AND gate (DUT).

Build a minimal UVM environment with:

A driver that drives random input values to the DUT.

A monitor that observes the output.

An agent that combines the driver and monitor.

An environment (env) that instantiates the agent.

A test that runs this environment.

Use factory registration and factory overrides for at least one component.

Goal: Understand how the testbench architecture connects and how data flows through components.







Problem Statement 2: Multi-Level Testbench with Build & Phasing Practice
Objective: Design a multi-level testbench simulating a block-level integration of two small DUTs (e.g., AND + OR gates).

Tasks:

Create two small DUT modules: one 2-input AND gate and one 2-input OR gate.

Build separate UVM agents for each DUT.

Integrate both agents into a top-level environment.

Practice build and connect phases explicitly in all components.

Add print statements in each UVM phase (e.g., build_phase, connect_phase, run_phase) to observe the flow.

Goal: Practice UVM phasing and learn to scale the architecture from component to integration-level.
